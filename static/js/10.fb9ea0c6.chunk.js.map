{"version":3,"sources":["components/Formik/EditProfileFormik.tsx","components/Users/EditProfile.js","Screens/EditProfileScreen.tsx"],"names":["phoneRegex","RegExp","EditProfileFormik","user","dispatch","useDispatch","initialValues","nick","firstName","lastName","phone","opinion","email","providerId","validationSchema","Yup","min","max","required","matches","onSubmit","values","seveEditedUserDataAction","formik","className","htmlFor","name","props","field","meta","form","id","type","touched","error","disabled","placeholder","rows","cols","dirty","errors","EditProfile","userAuth","useSelector","state","userAction","isLoading","isError","useState","wasDataSend","setWasDataSend","history","useHistory","useEffect","prev","push","photoId","src","alt","size","color","EditProfileScreen","TitleSection","title"],"mappings":"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","file":"static/js/10.fb9ea0c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Field, Form, Formik, FormikProps, FieldProps } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch } from 'react-redux';\r\nimport { seveEditedUserDataAction } from '../../redux/actions/userActions';\r\nimport { IUser, IUserEditProfile } from '../../models/users';\r\n\r\n\r\ninterface EditProfileFormikProps {\r\n  user: IUserEditProfile\r\n}\r\n\r\n// interface IFormikEditProfile {\r\n//   nick: HTMLInputElement,\r\n//   firstName: HTMLInputElement,\r\n//   lastName: HTMLInputElement,\r\n//   phone: HTMLInputElement,\r\n//   opinion: HTMLInputElement,\r\n//   email: HTMLInputElement,\r\n//   providerId: string | undefined\r\n// }\r\n\r\n\r\nconst phoneRegex = RegExp(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3})$/);\r\n\r\nconst EditProfileFormik: React.FC<EditProfileFormikProps> = ({ user }) => {\r\n  const dispatch = useDispatch();\r\n  const initialValues: IUserEditProfile = {\r\n    nick: user.nick,\r\n    firstName: user.firstName,\r\n    lastName: user.lastName,\r\n    phone: user.phone,\r\n    opinion: user.opinion,\r\n    email: user.email,\r\n    providerId: user?.providerId\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    nick: Yup.string()\r\n      .min(3, 'minimalna liczba znaków to 3')\r\n      .max(50, ',maksymalna lczba znaków 50')\r\n      .required('pole jest wymagane w celu kontaktu instruktora'),\r\n\r\n    firstName: Yup.string()\r\n      .min(3, 'minimalna liczba znaków to 3')\r\n      .max(50, ',maksymalna lczba znaków 50')\r\n      .required('pole jest wymagane w celu kontaktu instruktora'),\r\n\r\n    lastName: Yup.string()\r\n      .min(3, 'minimalna liczba znaków to 3')\r\n      .max(50, ',maksymalna lczba znaków 50')\r\n      .required('pole jest wymagane w celu kontaktu instruktora'),\r\n\r\n    phone: Yup.string()\r\n      .matches(phoneRegex, 'nie poprawny numer kom.')\r\n      .required('pole jest wymagane w celu kontaktu instruktora'),\r\n\r\n    email: Yup.string()\r\n      .email('niepoprawny adres e-mial')\r\n      .max(50, ',maksymalna lczba znaków 50')\r\n      .required('proszę podaj adres e-mail'),\r\n\r\n    opinion: Yup.string()\r\n      .min(25, ',minimalna lczba znaków 20')\r\n      .max(500, ',maksymalna lczba znaków 500'),\r\n  });\r\n  const handleSubmit = (values: IUserEditProfile) => {\r\n    dispatch(seveEditedUserDataAction(values, user));\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {(formik: FormikProps<IUserEditProfile>) => (\r\n        <Form className=\"editUserProfile\">\r\n          {/* <Form className=\"userProfile editUserProfile\"> */}\r\n          <div className=\"bodyInputEditProfile\">\r\n            <label className=\"labelInputEditProfile\" htmlFor=\"name\">\r\n              nick:\r\n            </label>\r\n            <Field name=\"nick\">\r\n              {(props: FieldProps) => {\r\n                const { field, form, meta } = props;\r\n                return (\r\n                  <div>\r\n                    <input\r\n                      className=\"inputModalContaineFormInput\"\r\n                      id=\"name\"\r\n                      type=\"text\"\r\n                      {...field}\r\n                    />\r\n\r\n                    <div className=\"errorMessenge\">\r\n                      {meta.touched && meta.error}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }}\r\n            </Field>\r\n          </div>\r\n          <div className=\"bodyInputEditProfile\">\r\n            <label className=\"labelInputEditProfile\" htmlFor=\"firstName\">\r\n              imię:\r\n            </label>\r\n            <Field name=\"firstName\">\r\n              {(props: FieldProps) => {\r\n                const { field, form, meta } = props;\r\n                return (\r\n                  <div>\r\n                    <input\r\n                      className=\"inputModalContaineFormInput\"\r\n                      id=\"firstName\"\r\n                      type=\"text\"\r\n                      {...field}\r\n                    />\r\n                    <div className=\"errorMessenge\">\r\n                      {meta.touched && meta.error}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }}\r\n            </Field>\r\n          </div>\r\n          <div className=\"bodyInputEditProfile\">\r\n            <label className=\"labelInputEditProfile\" htmlFor=\"lastName\">\r\n              nazwisko:\r\n            </label>\r\n            <Field name=\"lastName\">\r\n              {(props: FieldProps) => {\r\n                const { field, form, meta } = props;\r\n                return (\r\n                  <div>\r\n                    <input\r\n                      className=\"inputModalContaineFormInput\"\r\n                      id=\"lastName\"\r\n                      type=\"text\"\r\n                      {...field}\r\n                    />\r\n                    <div className=\"errorMessenge\">\r\n                      {meta.touched && meta.error}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }}\r\n            </Field>\r\n          </div>\r\n          <div className=\"bodyInputEditProfile\">\r\n            <label className=\"labelInputEditProfile\" htmlFor=\"phone\">\r\n              tel:\r\n            </label>\r\n            <Field name=\"phone\">\r\n              {(props: FieldProps) => {\r\n                const { field, form, meta } = props;\r\n                return (\r\n                  <div>\r\n                    <input\r\n                      className=\"inputModalContaineFormInput\"\r\n                      id=\"phone\"\r\n                      type=\"phone\"\r\n                      {...field}\r\n                    />\r\n                    <div className=\"errorMessenge\">\r\n                      {meta.touched && meta.error}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }}\r\n            </Field>\r\n          </div>\r\n          <div className=\"bodyInputEditProfile\">\r\n            <label className=\"labelInputEditProfile\" htmlFor=\"email\">\r\n              e-mail:\r\n            </label>\r\n            <Field name=\"email\">\r\n              {(props: FieldProps) => {\r\n                const { field, form, meta } = props;\r\n                return (\r\n                  <div>\r\n                    <input\r\n                      className=\"inputModalContaineFormInput\"\r\n                      id=\"email\"\r\n                      type=\"email\"\r\n                      disabled={\r\n                        user.providerId === 'google.com' ||\r\n                        user.providerId === 'facebook.com'\r\n                      }\r\n                      {...field}\r\n                    />\r\n                    <div className=\"errorMessenge\">\r\n                      {meta.touched && meta.error}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }}\r\n            </Field>\r\n          </div>\r\n          <div className=\"bodyInputEditProfile\">\r\n            <label className=\"labelInputEditProfile\" htmlFor=\"opinion\">\r\n              opinia:\r\n            </label>\r\n            <Field name=\"opinion\">\r\n              {(props: FieldProps) => {\r\n                const { field, form, meta } = props;\r\n\r\n                return (\r\n                  <div>\r\n                    <textarea\r\n                      className=\"inputModalContaineFormInput textareaEditProfile\"\r\n                      id=\"opinion\"\r\n                      placeholder=\"Tu możesz wystawić opinię o stadninie. Wystawiając opinię WYRAŻSZ ZGODĘ na upublicznienie swojego opini wraz z zdjeciem profilu. Zawsze możesz edytować lub wykasować opinię. Usunięcie opini skutkuje usunięciem jej z miejsca publicznego strony. Jeśli nie jesteś pełnoletni o zgodę zapytaj osoby dorosłe ...\"\r\n                      // type='text'\r\n                      rows={10}\r\n                      cols={38}\r\n                      {...field}\r\n                    />\r\n\r\n                    <div className=\"errorMessenge\">\r\n                      {meta.touched && meta.error}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }}\r\n            </Field>\r\n          </div>\r\n\r\n          <div className=\"btnBodyEditProfileSave\">\r\n            <button\r\n              // disabled={!formik.dirty || formik.errors}\r\n              disabled={\r\n                !formik.dirty ||\r\n                !!formik.errors.nick ||\r\n                !!formik.errors.firstName ||\r\n                !!formik.errors.lastName ||\r\n                !!formik.errors.phone ||\r\n                !!formik.errors.opinion ||\r\n                !!formik.errors.email\r\n              }\r\n              type=\"submit\"\r\n              className=\"btn btn-green btn-capitalize\"\r\n            >\r\n              zapisz\r\n            </button>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default EditProfileFormik;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport EditProfileFormik from '../Formik/EditProfileFormik';\r\nimport { PulseLoader } from 'react-spinners';\r\n\r\nconst EditProfile = () => {\r\n  const userAuth = useSelector((state) => state.userAction);\r\n  const { user, isLoading, isError } = userAuth;\r\n  const [wasDataSend, setWasDataSend] = useState(false);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (isLoading && !wasDataSend) {\r\n      setWasDataSend((prev) => {\r\n        return !prev;\r\n      });\r\n    }\r\n    !isLoading && !isError && wasDataSend && history.push('profil');\r\n    return () => {\r\n      setWasDataSend((prev) => {\r\n        return !prev;\r\n      });\r\n    };\r\n  }, [isLoading, isError, wasDataSend]);\r\n\r\n  return (\r\n    <div className=\"contaniner profileContainer editProfileContainer\">\r\n      <div className=\"imapgeProfile\">\r\n        {user && user.photoId && (\r\n          <img\r\n            className=\"image-user imageEditProfile\"\r\n            src={user.photoId}\r\n            alt=\"użytkownik\"\r\n          />\r\n        )}\r\n        <div className=\"profileButtons profileButtonPhoto\">\r\n          <button\r\n            className=\"btn btn-green btn-capitalize \r\n            btn-editProfile\"\r\n          >\r\n            {user && user.photoId && 'Zmień zdjęcie'}\r\n            {(!user || !user.photoId) && 'Dodaj zdjęcie'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {isLoading && <PulseLoader size={35} color={'hsla(94, 30%, 43%, 1)'} />}\r\n      {!isLoading && !isError && <EditProfileFormik user={user} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditProfile;\r\n","import React from 'react';\r\nimport EditProfile from '../components/Users/EditProfile';\r\nimport TitleSection from '../Layout/TitleSection';\r\n\r\nconst EditProfileScreen = () => {\r\n    return (\r\n        <>\r\n            <TitleSection\r\n                title=\"Edycja profilu\" />\r\n            <EditProfile />\r\n        </>\r\n    );\r\n};\r\nexport default EditProfileScreen"],"sourceRoot":""}